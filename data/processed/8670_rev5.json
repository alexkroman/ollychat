[
  {
    "name": "CPU Cost",
    "description": "",
    "queries": [
      "sum(\n (\n (\n sum(kube_node_status_capacity_cpu_cores) by (node)\n * on (node) group_left (label_cloud_google_com_gke_preemptible)\n kube_node_labels\n ) * $costpcpu\n )\n or\n (\n (\n sum(kube_node_status_capacity_cpu_cores) by (node)\n * on (node) group_left (label_cloud_google_com_gke_preemptible)\n kube_node_labels\n ) * ($costcpu - ($costcpu / 100 * $costDiscount))\n )\n) "
    ]
  },
  {
    "name": "RAM Cost",
    "description": "",
    "queries": [
      "sum(\n (\n (\n sum(kube_node_status_capacity_memory_bytes) by (node)\n * on (node) group_left (label_cloud_google_com_gke_preemptible)\n kube_node_labels\n ) /1024/1024/1024 * $costpram\n )\n or\n (\n (\n sum(kube_node_status_capacity_memory_bytes) by (node)\n * on (node) group_left (label_cloud_google_com_gke_preemptible)\n kube_node_labels\n ) /1024/1024/1024 * ($costram - ($costram / 100 * $costDiscount))\n)\n) "
    ]
  },
  {
    "name": "Storage Cost (Cluster and PVC)",
    "description": "",
    "queries": [
      "sum (\n sum(kube_persistentvolumeclaim_info) by (persistentvolumeclaim, namespace, storageclass)\n + on (persistentvolumeclaim, namespace) group_right(storageclass)\n sum(kube_persistentvolumeclaim_resource_requests_storage_bytes) by (persistentvolumeclaim, namespace) or up * 0\n) / 1024 / 1024 /1024 * $costStorageSSD\n\n+\n\nsum (\n sum(kube_persistentvolumeclaim_info) by (persistentvolumeclaim, namespace, storageclass)\n + on (persistentvolumeclaim, namespace) group_right(storageclass)\n sum(kube_persistentvolumeclaim_resource_requests_storage_bytes) by (persistentvolumeclaim, namespace) or up * 0\n) / 1024 / 1024 /1024 * $costStorageStandard\n\n+ \n\nsum(container_fs_limit_bytes) / 1024 / 1024 / 1024 * 1.03 * $costStorageStandard"
    ]
  },
  {
    "name": "Network Egress Cost",
    "description": "Represents a near worst-case approximation of network costs.",
    "queries": [
      "SUM(rate(node_network_transmit_bytes_total[60m]) / 1024 / 1024 / 1024 ) * (60 * 60 * 24 * 30) * $costEgress"
    ]
  },
  {
    "name": "CPU Utilization",
    "description": "Current CPU use from applications divided by allocatable CPUs",
    "queries": [
      "(\n sum(\n count(irate(container_cpu_usage_seconds_total[10m])) by (instance)\n * on (instance) \n sum(irate(container_cpu_usage_seconds_total[10m])) by (instance)\n ) \n / \n (sum (kube_node_status_allocatable_cpu_cores))\n) * 100"
    ]
  },
  {
    "name": "CPU Requests",
    "description": "Current CPU reservation requests from applications vs allocatable CPU",
    "queries": [
      "SUM(kube_pod_container_resource_requests_cpu_cores) / SUM(kube_node_status_allocatable_cpu_cores) * 100"
    ]
  },
  {
    "name": "RAM Utilization",
    "description": "Current RAM use vs RAM available",
    "queries": [
      "SUM(container_memory_usage_bytes) / SUM(kube_node_status_allocatable_memory_bytes) * 100",
      ""
    ]
  },
  {
    "name": "RAM Requests",
    "description": "Current RAM requests vs RAM available",
    "queries": [
      "(\n sum(kube_pod_container_resource_requests_memory_bytes)\n /\n sum(kube_node_status_allocatable_memory_bytes)\n) * 100"
    ]
  },
  {
    "name": "Storage Utilization",
    "description": "This gauge shows the current standard storage use, including cluster storage, vs storage available",
    "queries": [
      "sum (\n sum(kube_persistentvolumeclaim_info) by (persistentvolumeclaim, namespace, storageclass)\n + on (persistentvolumeclaim, namespace) group_right(storageclass)\n sum(kubelet_volume_stats_used_bytes) by (persistentvolumeclaim, namespace) or up * 0\n + sum(container_fs_usage_bytes)\n) /\nsum (\n sum(kube_persistentvolumeclaim_info) by (persistentvolumeclaim, namespace, storageclass)\n + on (persistentvolumeclaim, namespace) group_right(storageclass)\n sum(kube_persistentvolumeclaim_resource_requests_storage_bytes) by (persistentvolumeclaim, namespace) or up * 0\n + sum(container_fs_limit_bytes)\n) * 100"
    ]
  },
  {
    "name": "SSD Utilization",
    "description": "This gauge shows the current SSD use vs SSD available",
    "queries": [
      "sum (\n sum(kube_persistentvolumeclaim_info) by (persistentvolumeclaim, namespace, storageclass)\n + on (persistentvolumeclaim, namespace) group_right(storageclass)\n sum(kubelet_volume_stats_used_bytes) by (persistentvolumeclaim, namespace)\n) /\nsum (\n sum(kube_persistentvolumeclaim_info) by (persistentvolumeclaim, namespace, storageclass)\n + on (persistentvolumeclaim, namespace) group_right(storageclass)\n sum(kube_persistentvolumeclaim_resource_requests_storage_bytes) by (persistentvolumeclaim, namespace)\n) * 100"
    ]
  },
  {
    "name": "Total Monthly Cost",
    "description": "Expected monthly cost given current CPU, memory storage, and network resource consumption",
    "queries": [
      "# CPU\nsum(\n (\n (\n sum(kube_node_status_capacity_cpu_cores) by (node)\n * on (node) group_left (label_cloud_google_com_gke_preemptible)\n kube_node_labels\n ) * $costpcpu\n )\n or\n (\n (\n sum(kube_node_status_capacity_cpu_cores) by (node)\n * on (node) group_left (label_cloud_google_com_gke_preemptible)\n kube_node_labels\n ) * ($costcpu - ($costcpu / 100 * $costDiscount))\n )\n) \n\n+ \n\n# Storage\nsum (\n sum(kube_persistentvolumeclaim_info) by (persistentvolumeclaim, namespace, storageclass)\n + on (persistentvolumeclaim, namespace) group_right(storageclass)\n sum(kube_persistentvolumeclaim_resource_requests_storage_bytes) by (persistentvolumeclaim, namespace) or up * 0\n) / 1024 / 1024 /1024 * $costStorageSSD\n\n+\n\nsum (\n sum(kube_persistentvolumeclaim_info) by (persistentvolumeclaim, namespace, storageclass)\n + on (persistentvolumeclaim, namespace) group_right(storageclass)\n sum(kube_persistentvolumeclaim_resource_requests_storage_bytes) by (persistentvolumeclaim, namespace) or up * 0\n) / 1024 / 1024 /1024 * $costStorageStandard\n\n+ \n\nsum(container_fs_limit_bytes) / 1024 / 1024 / 1024 * 1.03 * $costStorageStandard \n\n+\n\n# END STORAGE\n# RAM \nsum(\n (\n (\n sum(kube_node_status_capacity_memory_bytes) by (node)\n * on (node) group_left (label_cloud_google_com_gke_preemptible)\n kube_node_labels\n ) /1024/1024/1024 * $costpram\n )\n or\n (\n (\n sum(kube_node_status_capacity_memory_bytes) by (node)\n * on (node) group_left (label_cloud_google_com_gke_preemptible)\n kube_node_labels\n ) /1024/1024/1024 * ($costram - ($costram / 100 * $costDiscount))\n)\n)\n\n+\n\n#Network \nSUM(rate(node_network_transmit_bytes_total[60m]) / 1024 / 1024 / 1024 ) * (60 * 60 * 24 * 30) * $costEgress"
    ]
  },
  {
    "name": "Total monthly cost",
    "description": "Expected monthly CPU, memory and storage costs given provisioned resources",
    "queries": [
      "# CPU\nsum(\n (\n (\n sum(kube_node_status_capacity_cpu_cores) by (node)\n * on (node) group_left (label_cloud_google_com_gke_preemptible)\n kube_node_labels\n ) * $costpcpu\n )\n or\n (\n (\n sum(kube_node_status_capacity_cpu_cores) by (node)\n * on (node) group_left (label_cloud_google_com_gke_preemptible)\n kube_node_labels\n ) * ($costcpu - ($costcpu / 100 * $costDiscount))\n )\n) \n\n+ \n\n# Storage\nsum (\n sum(kube_persistentvolumeclaim_info) by (persistentvolumeclaim, namespace, storageclass)\n + on (persistentvolumeclaim, namespace) group_right(storageclass)\n sum(kube_persistentvolumeclaim_resource_requests_storage_bytes) by (persistentvolumeclaim, namespace) or up * 0\n) / 1024 / 1024 /1024 * $costStorageSSD\n\n+\n\nsum (\n sum(kube_persistentvolumeclaim_info) by (persistentvolumeclaim, namespace, storageclass)\n + on (persistentvolumeclaim, namespace) group_right(storageclass)\n sum(kube_persistentvolumeclaim_resource_requests_storage_bytes) by (persistentvolumeclaim, namespace) or up * 0\n) / 1024 / 1024 /1024 * $costStorageStandard\n\n+ \n\nsum(container_fs_limit_bytes) / 1024 / 1024 / 1024 * 1.03 * $costStorageStandard \n\n+\n\n# END STORAGE\n# RAM \nsum(\n (\n (\n sum(kube_node_status_capacity_memory_bytes) by (node)\n * on (node) group_left (label_cloud_google_com_gke_preemptible)\n kube_node_labels\n ) /1024/1024/1024 * $costpram\n )\n or\n (\n (\n sum(kube_node_status_capacity_memory_bytes) by (node)\n * on (node) group_left (label_cloud_google_com_gke_preemptible)\n kube_node_labels\n ) /1024/1024/1024 * ($costram - ($costram / 100 * $costDiscount))\n)\n) \n\n+\n\n#Network \nSUM(rate(node_network_transmit_bytes_total[60m]) / 1024 / 1024 / 1024 ) * (60 * 60 * 24 * 30) * $costEgress"
    ]
  },
  {
    "name": "Namespace cost allocation",
    "description": "Resources allocated to namespace based on container requests",
    "queries": [
      "(\n sum(kube_pod_container_resource_requests_cpu_cores*($costcpu - ($costcpu / 100 * $costDiscount))) by(namespace)\n or\n count(\n count(container_spec_cpu_shares) by(namespace)\n ) by(namespace) -1\n)\n\n+\n\n(\n sum(kube_pod_container_resource_requests_cpu_cores*$costpcpu) by(namespace)\n or\n count(\n count(container_spec_cpu_shares) by(namespace)\n ) by(namespace) -1\n)",
      "(\n sum(kube_pod_container_resource_requests_memory_bytes / 1024 / 1024 / 1024*($costram- ($costram / 100 * $costDiscount))) by (namespace) \n or\n count(\n count(container_spec_memory_limit_bytes) by(namespace)\n ) by(namespace) -1\n)\n\n+\n\n(\n sum(kube_pod_container_resource_requests_memory_bytes / 1024 / 1024 / 1024 * $costpram ) by (namespace) \n or\n count(\n count(container_spec_memory_limit_bytes) by(namespace)\n ) by(namespace) -1\n)",
      "sum (\n sum(kube_persistentvolumeclaim_info) by (persistentvolumeclaim, namespace, storageclass)\n + on (persistentvolumeclaim, namespace) group_right(storageclass)\n sum(kube_persistentvolumeclaim_resource_requests_storage_bytes) by (persistentvolumeclaim, namespace) \n) by (namespace) / 1024 / 1024 /1024 * $costStorageSSD \n\nor\n\nsum (\n sum(kube_persistentvolumeclaim_info) by (persistentvolumeclaim, namespace, storageclass)\n + on (persistentvolumeclaim, namespace) group_right(storageclass)\n sum(kube_persistentvolumeclaim_resource_requests_storage_bytes) by (persistentvolumeclaim, namespace) \n) by (namespace) / 1024 / 1024 /1024 * $costStorageStandard",
      "# CPU \n(\n sum(kube_pod_container_resource_requests_cpu_cores*($costcpu - ($costcpu / 100 * $costDiscount))) by(namespace)\n or\n count(\n count(container_spec_cpu_shares) by(namespace)\n ) by(namespace) -1\n)\n\n+\n\n(\n sum(kube_pod_container_resource_requests_cpu_cores*$costpcpu) by(namespace)\n or\n count(\n count(container_spec_cpu_shares) by(namespace)\n ) by(namespace) -1\n)\n\n+\n\n#END CPU \n# Memory \n\n(\n sum(kube_pod_container_resource_requests_memory_bytes / 1024 / 1024 / 1024*($costram- ($costram / 100 * $costDiscount))) by (namespace) \n or\n count(\n count(container_spec_memory_limit_bytes) by(namespace)\n ) by(namespace) -1\n)\n\n+\n\n(\n sum(kube_pod_container_resource_requests_memory_bytes / 1024 / 1024 / 1024 * $costpram ) by (namespace) \n or\n count(\n count(container_spec_memory_limit_bytes) by(namespace)\n ) by(namespace) -1\n)\n\n+\n\n# PV storage\n\n(\nsum (\n sum(kube_persistentvolumeclaim_info) by (persistentvolumeclaim, namespace, storageclass)\n + on (persistentvolumeclaim, namespace) group_right(storageclass)\n sum(kube_persistentvolumeclaim_resource_requests_storage_bytes) by (persistentvolumeclaim, namespace) \n) by (namespace) / 1024 / 1024 /1024 * $costStorageSSD \n\nor\n\nsum (\n sum(kube_persistentvolumeclaim_info) by (persistentvolumeclaim, namespace, storageclass)\n + on (persistentvolumeclaim, namespace) group_right(storageclass)\n sum(kube_persistentvolumeclaim_resource_requests_storage_bytes) by (persistentvolumeclaim, namespace) \n) by (namespace) / 1024 / 1024 /1024 * $costStorageStandard \n)"
    ]
  },
  {
    "name": "Cluster CPUs",
    "description": "",
    "queries": [
      "SUM(kube_node_status_capacity_cpu_cores)",
      "SUM(kube_pod_container_resource_requests_cpu_cores)",
      "SUM(irate(container_cpu_usage_seconds_total[5m]))",
      "SUM(kube_pod_container_resource_limits_cpu_cores) "
    ]
  },
  {
    "name": "CPU Mode",
    "description": "",
    "queries": [
      "avg(irate(node_cpu_seconds_total[5m])) by (mode) * 100"
    ]
  },
  {
    "name": "CPU request utilization by namespace",
    "description": "This table shows the comparison of CPU requests and usage by namespace",
    "queries": [
      "sum(kube_pod_container_resource_requests_cpu_cores) by (namespace) ",
      "sum (rate (container_cpu_usage_seconds_total[24h])) by (namespace)"
    ]
  },
  {
    "name": "Cluster cost & utilization by node",
    "description": "This table shows the comparison of application CPU usage vs the capacity of the node (measured over last 60 minutes)",
    "queries": [
      "SUM(\nSUM(rate(container_cpu_usage_seconds_total[24h])) by (pod_name)\n* on (pod_name) group_left (node) \nlabel_replace(\n kube_pod_info,\n \"pod_name\", \n \"$1\", \n \"pod\", \n \"(.+)\"\n)\n) by (node) \n/ \nsum(kube_node_status_capacity_cpu_cores) by (node)",
      "sum(kube_pod_container_resource_requests_cpu_cores) by (node) / sum(kube_node_status_capacity_cpu_cores) by (node)"
    ]
  },
  {
    "name": "Cluster memory (GB)",
    "description": "",
    "queries": [
      "SUM(kube_node_status_capacity_memory_bytes / 1024 / 1024 / 1024)",
      "SUM(kube_pod_container_resource_requests_memory_bytes / 1024 / 1024 / 1024)",
      "SUM(container_memory_usage_bytes / 1024 / 1024 / 1024)",
      "SUM(kube_pod_container_resource_limits_memory_bytes  / 1024 / 1024 / 1024)"
    ]
  },
  {
    "name": "Cluster Memory Utilization",
    "description": "",
    "queries": [
      "1 - sum(node_memory_MemAvailable_bytes) by (node) / sum(node_memory_MemTotal_bytes) by (node)"
    ]
  },
  {
    "name": "Memory requests & utilization by namespace",
    "description": "Comparison of memory requests and current usage by namespace",
    "queries": [
      "sum(kube_pod_container_resource_requests_memory_bytes / 1024 / 1024 / 1024) by (namespace) ",
      "SUM(container_memory_usage_bytes / 1024 / 1024 / 1024) by (namespace)"
    ]
  },
  {
    "name": "Node utilization of allocatable RAM",
    "description": "Container RAM usage vs node capacity",
    "queries": [
      "SUM(label_replace(container_memory_usage_bytes, \"node\", \"$1\", \"instance\",\"(.+)\")) by (node) * 100\n/\nSUM(kube_node_status_capacity_memory_bytes) by (node)",
      "sum(kube_pod_container_resource_requests_memory_bytes) by (node) / SUM(kube_node_status_capacity_memory_bytes) by (node)"
    ]
  },
  {
    "name": "Local Storage",
    "description": "",
    "queries": [
      "SUM(container_fs_limit_bytes) by (instance) / 1024 / 1024 / 1024 * 1.03",
      "SUM(container_fs_limit_bytes) by (instance) / 1024 / 1024 / 1024 * 1.03 * $costStorageStandard\n",
      "sum(container_fs_usage_bytes / container_fs_limit_bytes) by (instance) \n"
    ]
  },
  {
    "name": "Local storage utilization",
    "description": "",
    "queries": [
      "SUM(container_fs_usage_bytes) / SUM(container_fs_limit_bytes)"
    ]
  },
  {
    "name": "Persistent Volume Claims",
    "description": "",
    "queries": [
      "sum (\n sum(kube_persistentvolumeclaim_info) by (persistentvolumeclaim, namespace, storageclass)\n * on (persistentvolumeclaim, namespace) group_right(storageclass)\n sum(kube_persistentvolumeclaim_resource_requests_storage_bytes) by (persistentvolumeclaim, namespace)\n) by (namespace,persistentvolumeclaim,storageclass) / 1024 / 1024 /1024\n\nor\n\nsum (\n sum(kube_persistentvolumeclaim_info) by (persistentvolumeclaim, namespace, storageclass)\n * on (persistentvolumeclaim, namespace) group_right(storageclass)\n sum(kube_persistentvolumeclaim_resource_requests_storage_bytes) by (persistentvolumeclaim, namespace)\n) by (namespace,persistentvolumeclaim,storageclass) / 1024 / 1024 /1024\n\n\n",
      "sum (\n sum(kube_persistentvolumeclaim_info) by (persistentvolumeclaim, namespace, storageclass)\n * on (persistentvolumeclaim, namespace) group_right(storageclass)\n sum(kube_persistentvolumeclaim_resource_requests_storage_bytes) by (persistentvolumeclaim, namespace)\n) by (namespace,persistentvolumeclaim,storageclass) / 1024 / 1024 /1024 * $costStorageSSD\n\nor\n\nsum (\n sum(kube_persistentvolumeclaim_info) by (persistentvolumeclaim, namespace, storageclass)\n * on (persistentvolumeclaim, namespace) group_right(storageclass)\n sum(kube_persistentvolumeclaim_resource_requests_storage_bytes) by (persistentvolumeclaim, namespace)\n) by (namespace,persistentvolumeclaim,storageclass) / 1024 / 1024 /1024 * $costStorageStandard\n",
      "sum(kubelet_volume_stats_used_bytes) by (persistentvolumeclaim, namespace) \n/\nsum (\n sum(kube_persistentvolumeclaim_info) by (persistentvolumeclaim, namespace, storageclass)\n * on (persistentvolumeclaim, namespace) group_right(storageclass)\n sum(kube_persistentvolumeclaim_resource_requests_storage_bytes) by (persistentvolumeclaim, namespace)\n) by (namespace,persistentvolumeclaim)"
    ]
  },
  {
    "name": "Disk IOPS",
    "description": "",
    "queries": [
      "SUM(rate(node_disk_reads_completed_total[10m])) or SUM(rate(node_disk_reads_completed[10m]))\n",
      "SUM(rate(node_disk_writes_completed_total[10m])) or SUM(rate(node_disk_writes_completed[10m]))"
    ]
  },
  {
    "name": "Inode usage",
    "description": "",
    "queries": [
      "SUM( kubelet_volume_stats_inodes_used / kubelet_volume_stats_inodes) by (persistentvolumeclaim) * 100"
    ]
  },
  {
    "name": "Node network transmit",
    "description": "",
    "queries": [
      "sum (rate (node_network_transmit_bytes_total[60m]))\n",
      "SUM ( rate(node_network_transmit_bytes_total[60m]))"
    ]
  }
]