[
  {
    "name": "Number of Endpoints in the registry",
    "description": "Number of Endpoints in the registry",
    "queries": [
      "external_dns_registry_endpoints_total "
    ]
  },
  {
    "name": "Number of Endpoints in all sources",
    "description": "Number of Endpoints in all sources",
    "queries": [
      "external_dns_source_endpoints_total "
    ]
  },
  {
    "name": "Timestamp of last attempted sync with the DNS provider",
    "description": "Timestamp of last attempted sync with the DNS provider",
    "queries": [
      "1000 * (external_dns_controller_last_reconcile_timestamp_seconds)"
    ]
  },
  {
    "name": "Timestamp of last successful sync with the DNS provider",
    "description": "Timestamp of last successful sync with the DNS provider",
    "queries": [
      "1000 * (external_dns_controller_last_sync_timestamp_seconds)"
    ]
  },
  {
    "name": "External-dns controller no_op runs total",
    "description": "External-dns controller no_op runs total",
    "queries": [
      "external_dns_controller_no_op_runs_total "
    ]
  },
  {
    "name": "Number of A records in registry",
    "description": "Number of A records in registry",
    "queries": [
      "external_dns_registry_a_records "
    ]
  },
  {
    "name": "Number of AAAA records in registry",
    "description": "Number of AAAA records in registry",
    "queries": [
      "external_dns_registry_aaaa_records "
    ]
  },
  {
    "name": "Number of A records in source",
    "description": "Number of A records in source",
    "queries": [
      "external_dns_source_a_records "
    ]
  },
  {
    "name": "Number of AAAA records in source",
    "description": "Number of AAAA records in source",
    "queries": [
      "external_dns_source_aaaa_records "
    ]
  },
  {
    "name": "Number of DNS A-records that exists both in source and registry",
    "description": "Number of DNS A-records that exists both in source and registry",
    "queries": [
      "external_dns_controller_verified_a_records "
    ]
  },
  {
    "name": "Number of DNS AAAA-records that exists both in source and registry",
    "description": "Number of DNS AAAA-records that exists both in source and registry",
    "queries": [
      "external_dns_controller_verified_aaaa_records "
    ]
  },
  {
    "name": "Total external-dns registry errors",
    "description": "Number of Registry errors",
    "queries": [
      "external_dns_registry_errors_total "
    ]
  },
  {
    "name": "Total external-dns source errors",
    "description": "Number of Source errors",
    "queries": [
      "external_dns_source_errors_total "
    ]
  },
  {
    "name": "CPU Usage",
    "description": "",
    "queries": [
      "sum(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate) by (pod)",
      "scalar(kube_resourcequota)",
      "scalar(kube_resourcequota)"
    ]
  },
  {
    "name": "Memory Usage (w/o cache)",
    "description": "",
    "queries": [
      "sum(container_memory_working_set_bytes) by (pod)",
      "scalar(kube_resourcequota)",
      "scalar(kube_resourcequota)"
    ]
  },
  {
    "name": "CPU Quota",
    "description": "",
    "queries": [
      "sum(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate) by (pod)",
      "sum(kube_pod_container_resource_requests) by (pod)",
      "sum(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate) by (pod) / sum(kube_pod_container_resource_requests) by (pod)",
      "sum(kube_pod_container_resource_limits) by (pod)",
      "sum(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate) by (pod) / sum(kube_pod_container_resource_limits) by (pod)"
    ]
  },
  {
    "name": "Memory Quota",
    "description": "",
    "queries": [
      "sum(container_memory_working_set_bytes) by (pod)",
      "sum(kube_pod_container_resource_requests) by (pod)",
      "sum(container_memory_working_set_bytes) by (pod) / sum(kube_pod_container_resource_requests) by (pod)",
      "sum(kube_pod_container_resource_limits) by (pod)",
      "sum(container_memory_working_set_bytes) by (pod) / sum(kube_pod_container_resource_limits) by (pod)",
      "sum(container_memory_rss) by (pod)",
      "sum(container_memory_cache) by (pod)",
      "sum(container_memory_swap) by (pod)"
    ]
  }
]