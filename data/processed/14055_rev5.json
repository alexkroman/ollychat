[
  {
    "name": "Number of error/warning messages logged by Loki itself",
    "description": "Total number of messages logged by Loki itself",
    "queries": [
      "sum(rate(log_messages_total[1m])) by (level)\n",
      "log_messages_total"
    ]
  },
  {
    "name": "Error/warning messages logged by Loki itself",
    "description": "",
    "queries": [
      " | logfmt | level=\"warn\" or level=\"error\""
    ]
  },
  {
    "name": "Error/warning messages logged by Promtail",
    "description": "Total number of messages logged by Promtail",
    "queries": [
      "sum(rate(log_messages_total[1m])) by (level)\n"
    ]
  },
  {
    "name": "Error/warning messages logged by Promtail",
    "description": "",
    "queries": [
      " | logfmt | level=\"warn\" or level=\"error\""
    ]
  },
  {
    "name": "Loki (distributor) - failed batch appends sent to ingesters",
    "description": "",
    "queries": [
      "rate(loki_distributor_ingester_append_failures_total[1m])*60"
    ]
  },
  {
    "name": "Promtail - dropped log entries",
    "description": "Number of log entries dropped because failed to be sent to the Loki ingester after all retries.",
    "queries": [
      "rate(promtail_dropped_entries_total[1m])*60"
    ]
  },
  {
    "name": "Number of Streams in Loki",
    "description": "The total number of streams created per tenant.\nThis should not increase after startup.",
    "queries": [
      "loki_ingester_memory_streams"
    ]
  },
  {
    "name": "Loki (distributor) - log entries received per second",
    "description": "The total number of log entries received per tenant (not necessarily of lines, as an entry can have more than one line of text).",
    "queries": [
      "rate(loki_distributor_lines_received_total[1m])"
    ]
  },
  {
    "name": "Bytes received in ingester per second",
    "description": "The total number of uncompressed bytes received per tenant.\n",
    "queries": [
      "sum(rate(loki_distributor_bytes_received_total[1m]))"
    ]
  },
  {
    "name": "Loki memory usage (% of Kubernetes memory limit)",
    "description": "Percentage of actual usage over configured limit",
    "queries": [
      "100 * max by(pod,container) (container_memory_working_set_bytes)\n/\non (pod,container) group_left  kube_pod_container_resource_limits_memory_bytes"
    ]
  },
  {
    "name": "Loki memory usage vs Kubernetes limit and request",
    "description": "",
    "queries": [
      "container_memory_working_set_bytes",
      "min(kube_pod_container_resource_limits_memory_bytes)",
      "min(kube_pod_container_resource_requests_memory_bytes)"
    ]
  },
  {
    "name": "Promtail memory usage (% of Kubernetes memory limit)",
    "description": "Percentage of actual usage over configured limit",
    "queries": [
      "100* max by(pod,container) (container_memory_working_set_bytes)\n/\non (pod,container) (kube_pod_container_resource_limits_memory_bytes)"
    ]
  },
  {
    "name": "Promtail memory usage vs Kubernetes limit and request",
    "description": "",
    "queries": [
      "container_memory_working_set_bytes",
      "min(kube_pod_container_resource_limits_memory_bytes)",
      "min(kube_pod_container_resource_requests_memory_bytes)"
    ]
  },
  {
    "name": "Loki CPU usage (% of Kubernetes CPU limit)",
    "description": "percentage of configured limit",
    "queries": [
      "100* rate(container_cpu_usage_seconds_total[1m])\n/\non (pod,container) kube_pod_container_resource_limits_cpu_cores"
    ]
  },
  {
    "name": "Loki CPU usage vs Kubernetes limit and request",
    "description": "",
    "queries": [
      "rate(container_cpu_usage_seconds_total[1m])",
      "min(kube_pod_container_resource_limits_cpu_cores)",
      "min(kube_pod_container_resource_requests_cpu_cores)"
    ]
  },
  {
    "name": "Promtail CPU usage (% of Kubernetes limit)",
    "description": "percentage of configured limit",
    "queries": [
      "100 * rate(container_cpu_usage_seconds_total[1m])\n/\non (pod,container) kube_pod_container_resource_limits_cpu_cores"
    ]
  },
  {
    "name": "Promtail CPU usage vs Kubernetes limit and request",
    "description": "",
    "queries": [
      "rate(container_cpu_usage_seconds_total[1m])",
      "min(kube_pod_container_resource_limits_cpu_cores)",
      "min(kube_pod_container_resource_requests_cpu_cores)"
    ]
  }
]