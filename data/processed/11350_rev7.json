[
  {
    "name": "Allocated Used",
    "description": "",
    "queries": [
      "sum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)\n/\nsum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)\n* 100"
    ]
  },
  {
    "name": "Allocated Unused",
    "description": "",
    "queries": [
      "(\n  sum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)\n  -\n  sum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)\n) / sum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)\n* 100"
    ]
  },
  {
    "name": "Allocated Used",
    "description": "Total Size of Allocated Blocks\n\nMemory that is actively used by Erlang data.\n\nThe smallest unit of memory that an allocator can work with is called a `block`. When you call an allocator to allocate a certain amount of memory what you get back is a block. It is also blocks that you give as an argument to the allocator when you want to deallocate memory.\n\nThe allocator does not allocate blocks from the operating system directly though. Instead the allocator allocates a carrier from the operating system, either through `sys_alloc` or through `mseg_alloc`, which in turn uses `malloc` or `mmap`. If `sys_alloc` is used the carrier is placed on the C-heap and if `mseg_alloc` is used the carrier is placed in a segment.\n\nSmall blocks are placed in a multiblock carrier. A multiblock carrier can as the name suggests contain many blocks. Larger blocks are placed in a singleblock carrier, which as the name implies on contains one block.\n\nWhatâ€™s considered a small and a large block is determined by the parameter singleblock carrier threshold (`sbct`).\n\n* [erts_alloc](http://erlang.org/doc/man/erts_alloc.html)\n* [The Memory Subsystem](https://github.com/happi/theBeamBook/blob/master/chapters/memory.asciidoc)",
    "queries": [
      "sum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)"
    ]
  },
  {
    "name": "Allocated Unused",
    "description": "Allocated Carriers - Allocated Blocks\n\n* [erts_alloc](http://erlang.org/doc/man/erts_alloc.html)\n* [The Memory Subsystem](https://github.com/happi/theBeamBook/blob/master/chapters/memory.asciidoc)",
    "queries": [
      "sum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)\n-\nsum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)"
    ]
  },
  {
    "name": "Allocated Total",
    "description": "Total Size of Allocated Carriers\n\nMemory that is reserved by the Erlang VM, which fits  one of the following descriptions:\n\n* actively used memory\n* memory given by the OS, yet-to-be-used\n* deallocated memory kept around before it is destroyed\n* carrier gaps in multi-block carriers (a.k.a. memory fragmentation)\n\nThe total size of allocated carriers can be either larger or smaller than the Erlang VM system process RSS memory.\n\n* [erts_alloc](http://erlang.org/doc/man/erts_alloc.html)\n* [The Memory Subsystem](https://github.com/happi/theBeamBook/blob/master/chapters/memory.asciidoc)",
    "queries": [
      "sum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)"
    ]
  },
  {
    "name": "Resident Set Size",
    "description": "Erlang VM Resident Set Size (RSS)\n\nAs reported by the OS",
    "queries": [
      "sum (rabbitmq_process_resident_memory_bytes * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)"
    ]
  },
  {
    "name": "",
    "description": "",
    "queries": [
      "rabbitmq_process_resident_memory_bytes * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info",
      "sum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)",
      "sum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)\n-\nsum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)"
    ]
  },
  {
    "name": "",
    "description": "",
    "queries": [
      "rabbitmq_process_resident_memory_bytes * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info",
      "sum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)",
      "sum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)\n-\nsum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)"
    ]
  },
  {
    "name": "",
    "description": "",
    "queries": [
      "sum by(alloc) (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)"
    ]
  },
  {
    "name": "",
    "description": "",
    "queries": [
      "sum by(alloc) (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)"
    ]
  },
  {
    "name": "Multiblock - Utilization",
    "description": "",
    "queries": [
      "sum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)\n/\nsum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)\n* 100"
    ]
  },
  {
    "name": "MB-C",
    "description": "",
    "queries": [
      "sum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)\n/\nsum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)"
    ]
  },
  {
    "name": "MB-B",
    "description": "",
    "queries": [
      "sum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)\n/\nsum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)"
    ]
  },
  {
    "name": "Multiblock Pool - Utilization",
    "description": "",
    "queries": [
      "sum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)\n/\nsum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)\n* 100"
    ]
  },
  {
    "name": "MBP-C",
    "description": "",
    "queries": [
      "sum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)\n/\nsum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)"
    ]
  },
  {
    "name": "MBP-B",
    "description": "",
    "queries": [
      "sum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)\n/\nsum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)"
    ]
  },
  {
    "name": "Singleblock - Utilization",
    "description": "",
    "queries": [
      "sum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)\n/\nsum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)\n* 100"
    ]
  },
  {
    "name": "SB-C",
    "description": "",
    "queries": [
      "sum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)\n/\nsum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)"
    ]
  },
  {
    "name": "SB-B",
    "description": "",
    "queries": [
      "sum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)\n/\nsum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)"
    ]
  },
  {
    "name": "$memory_allocator - Usage",
    "description": "",
    "queries": [
      "sum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)",
      "sum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)\n-\nsum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)",
      "sum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)",
      "sum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)\n-\nsum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)",
      "sum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)",
      "sum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)\n-\nsum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)"
    ]
  },
  {
    "name": "$memory_allocator - Usage",
    "description": "",
    "queries": [
      "sum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)",
      "sum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)\n-\nsum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)",
      "sum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)",
      "sum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)\n-\nsum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)",
      "sum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)",
      "sum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)\n-\nsum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)"
    ]
  },
  {
    "name": "$memory_allocator - Average Size",
    "description": "",
    "queries": [
      "sum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)\n/\nsum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)",
      "sum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)\n/\nsum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)",
      "sum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)\n/\nsum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)",
      "sum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)\n/\nsum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)",
      "sum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)\n/\nsum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)",
      "sum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)\n/\nsum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)"
    ]
  },
  {
    "name": "$memory_allocator - Average Size",
    "description": "",
    "queries": [
      "sum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)\n/\nsum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)",
      "sum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)\n/\nsum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)",
      "sum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)\n/\nsum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)",
      "sum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)\n/\nsum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)",
      "sum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)\n/\nsum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)",
      "sum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)\n/\nsum (erlang_vm_allocators * on(instance, job) group_left(rabbitmq_cluster, rabbitmq_node) rabbitmq_identity_info)"
    ]
  }
]