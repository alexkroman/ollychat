[
  {
    "name": "System resources overview",
    "description": "System resources usage",
    "queries": [
      "sum(rate(host_cpu_usage_sum[$interval]))\n/\nsum(rate(host_cpu_usage_count[$interval]))",
      "host_memory_used_bytes\n/\nhost_memory_total_bytes",
      "(host_swap_memory_used_bytes\n/\nhost_swap_memory_total_bytes) OR on() vector(0)"
    ]
  },
  {
    "name": "CPU %usr",
    "description": "Tracks the current time the CPU is busy on user mode.",
    "queries": [
      "sum(rate(host_cpu_usage_sum[$interval]))\n/\nsum(rate(host_cpu_usage_count[$interval]))"
    ]
  },
  {
    "name": "CPU %system",
    "description": "Tracks the current time the CPU is busy on system mode.",
    "queries": [
      "sum(rate(host_cpu_usage_sum[$interval]))\n/\nsum(rate(host_cpu_usage_count[$interval]))"
    ]
  },
  {
    "name": "CPU %wait",
    "description": "Tracks the current time the CPU is stuck waiting for IO.\n\nIf this value is high, the disk might be the bottleneck.",
    "queries": [
      "sum(rate(host_cpu_usage_sum[$interval]))\n/\nsum(rate(host_cpu_usage_count[$interval]))"
    ]
  },
  {
    "name": "Network usage",
    "description": "Traks network usage",
    "queries": [
      "rate(host_network_data_read_bytes_total[$interval])",
      "rate(host_network_data_write_bytes_total[$interval])"
    ]
  },
  {
    "name": "Retransmits",
    "description": "Tracks ratio for failed network packets",
    "queries": [
      "sum(host_network_packets_read_failed_total)\n/\nsum(host_network_packets_read_total_total)",
      "sum(host_network_packets_write_failed_total)\n/\nsum(host_network_packets_write_total_total)"
    ]
  },
  {
    "name": "Top 2 Disk usage",
    "description": "Tracks usage of space on Disk",
    "queries": [
      "topk(2, (sum by(mount)(host_storage_mount_space_used_bytes)\n/\nsum by(mount)(host_storage_mount_space_total_bytes)))"
    ]
  },
  {
    "name": "System load average",
    "description": "Tracks the system load average in 1m / 5m / 15m.\n\nThey indicate the average number of tasks (processes) wanting to run in the last 1m / 5m / 15m.\n\nOn Linux systems, these numbers is approximated and include processes wanting to run on the CPUs, as well as processes blocked in uninterruptible I/O (usually disk I/O).\nThis gives a high-level idea of resource load (or demand).\n\nThe three numbers give some idea of how load is changing over time.\n\nExcellent post on the subject: http://www.brendangregg.com/blog/2017-08-08/linux-load-averages.html",
    "queries": [
      "host_load_average",
      "host_load_average",
      "host_load_average"
    ]
  },
  {
    "name": "Proc %usr",
    "description": "Tracks the current time the CPU is busy by the process in user mode.",
    "queries": [
      "sum(rate(process_cpu_usage_sum[$interval]))\n/\nsum(rate(process_cpu_usage_count[$interval]))"
    ]
  },
  {
    "name": "Proc %system",
    "description": "Tracks the current time the CPU is busy by the process in kernel mode.",
    "queries": [
      "sum(rate(process_cpu_usage_sum[$interval]))\n/\nsum(rate(process_cpu_usage_count[$interval]))"
    ]
  },
  {
    "name": "CPU %steal",
    "description": "Tracks the current time the CPU is stolen by some process outside the VM.\n\nIf this value is high, it could be caused either by the supervisor is very busy, by a noisy neighbor or by some limitation on the quota assigned by the virtualization service.",
    "queries": [
      "sum(rate(host_cpu_usage_sum[$interval]))\n/\nsum(rate(host_cpu_usage_count[$interval]))"
    ]
  },
  {
    "name": "Disk usage",
    "description": "Traks the usage of disk space",
    "queries": [
      "rate(host_storage_device_data_read_bytes_total[$interval])",
      "rate(host_storage_device_data_write_bytes_total[$interval])"
    ]
  },
  {
    "name": "# FDs",
    "description": "Tracks the number of file descriptors in used by the process.",
    "queries": [
      "process_ulimit_file_descriptors_used"
    ]
  },
  {
    "name": "System load average in 1m / 5m / 15m",
    "description": "Tracks the system load average in 1m / 5m / 15m.\n\nThey indicate the average number of tasks (processes) wanting to run in the last 1m / 5m / 15m.\n\nOn Linux systems, these numbers is approximated and include processes wanting to run on the CPUs, as well as processes blocked in uninterruptible I/O (usually disk I/O).\nThis gives a high-level idea of resource load (or demand).\n\nThe three numbers give some idea of how load is changing over time.\n\nExcellent post on the subject: http://www.brendangregg.com/blog/2017-08-08/linux-load-averages.html",
    "queries": [
      "host_load_average",
      "host_load_average",
      "host_load_average"
    ]
  },
  {
    "name": "VM Hiccups (or idle jitters) in nanoseconds (p90)",
    "description": "Tracks the hiccups detected in the VM (also known as idle jitters) measured in nanoseconds. The 90ht percentile is presented.\n\nFor more info: https://www.azul.com/jhiccup/",
    "queries": [
      "histogram_quantile(0.9, sum(rate(process_hiccups_seconds_bucket[$interval])) by (le, instance))"
    ]
  },
  {
    "name": "VM CPU usage",
    "description": "Tracks the usage of CPU by the VM in the different typical views.",
    "queries": [
      "rate(host_cpu_usage_sum[$interval])\n/\nrate(host_cpu_usage_count[$interval])",
      "rate(host_cpu_usage_sum[$interval])\n/\nrate(host_cpu_usage_count[$interval])",
      "rate(host_cpu_usage_sum[$interval])\n/\nrate(host_cpu_usage_count[$interval])",
      "rate(host_cpu_usage_sum[$interval])\n/\nrate(host_cpu_usage_count[$interval])"
    ]
  },
  {
    "name": "Process CPU usage",
    "description": "Tracks the usage of CPU by the app in the different typical views.",
    "queries": [
      "rate(process_cpu_usage_sum[$interval])\n/\nrate(process_cpu_usage_count[$interval])",
      "rate(process_cpu_usage_sum[$interval])\n/\nrate(process_cpu_usage_count[$interval])"
    ]
  },
  {
    "name": "Host Memory",
    "description": "Tracks the total memory available Vs. the amount of used memory.",
    "queries": [
      "host_memory_used_bytes",
      "host_memory_total_bytes"
    ]
  },
  {
    "name": "Swap Memory",
    "description": "Tracks the total swap memory available Vs. the amount of used swap memory.",
    "queries": [
      "host_swap_memory_used_bytes",
      "host_swap_memory_total_bytes"
    ]
  },
  {
    "name": "Read / Write bandwidth",
    "description": "Tracks incoming and outgoing data through the network interfaces.",
    "queries": [
      "rate(host_network_data_read_bytes_total[$interval])",
      "rate(host_network_data_write_bytes_total[$interval]) * -1"
    ]
  },
  {
    "name": "Failed Read / Write packets",
    "description": "Tracks incoming and outgoing failed packets on all network interfaces.",
    "queries": [
      "rate(host_network_packets_read_failed_total[$interval])",
      "rate(host_network_packets_write_failed_total[$interval]) * -1"
    ]
  },
  {
    "name": "Disk usage",
    "description": "Tracks usage of disk.",
    "queries": [
      "sum by(mount)(host_storage_mount_space_used_bytes)\n/\nsum by (mount)(host_storage_mount_space_total_bytes)"
    ]
  },
  {
    "name": "Data transferred",
    "description": "Tracks the amount of data transferred to disk device.",
    "queries": [
      "rate(host_storage_device_data_read_bytes_total[$interval])",
      "rate(host_storage_device_data_write_bytes_total[$interval]) * -1"
    ]
  },
  {
    "name": "Disk I/O (ops/sec)",
    "description": "Tracks the number of completed disk I/O operations.",
    "queries": [
      "rate(host_storage_device_ops_read_total[$interval])",
      "rate(host_storage_device_ops_write_total[$interval]) * -1"
    ]
  },
  {
    "name": "Heap",
    "description": "Tracks the amount of memory used by the JVM heap.",
    "queries": [
      "jvm_memory_max_bytes",
      "jvm_memory_committed_bytes",
      "jvm_memory_used_bytes_sum\n/\njvm_memory_used_bytes_count"
    ]
  },
  {
    "name": "Off-Heap",
    "description": "Tracks the amount of memory used by the JVM outside the heap.",
    "queries": [
      "jvm_memory_max_bytes",
      "jvm_memory_committed_bytes",
      "jvm_memory_used_bytes_sum\n/\njvm_memory_used_bytes_count",
      "jvm_memory_free_bytes_sum\n/\njvm_memory_free_bytes_count"
    ]
  },
  {
    "name": "Garbage Collection",
    "description": "Tracks the distribution of GC events duration",
    "queries": [
      "rate(jvm_gc_seconds_sum[$interval])\n/\nrate(jvm_gc_seconds_count[$interval])"
    ]
  },
  {
    "name": "Number Of Threads",
    "description": "Tracks the number of threads in use.",
    "queries": [
      "rate(executor_threads_total_count[$interval])\n/\nrate(executor_threads_total_sum[$interval])"
    ]
  },
  {
    "name": "Number Of Tasks Completed",
    "description": "",
    "queries": [
      "rate(executor_tasks_completed_total[$interval])"
    ]
  },
  {
    "name": "Queue Size",
    "description": "",
    "queries": [
      "rate(executor_queue_size_bucket[$interval])"
    ]
  },
  {
    "name": "Maximum Number of Threads",
    "description": "Tracks maximum number of Threads of the executors.",
    "queries": [
      "executor_threads_max"
    ]
  },
  {
    "name": "Minimum Number of Threads",
    "description": "Tracks minimum number of Threads of the executors.",
    "queries": [
      "executor_threads_min"
    ]
  },
  {
    "name": "Executor parallelism",
    "description": "Tracks executor parallelism.",
    "queries": [
      "executor_parallelism"
    ]
  }
]